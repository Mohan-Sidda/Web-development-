# TASK3:
  TIC-TAC-TOE WEB APPLICATION Build a tic-tac-toe web application against each other or Computer. Implement functions to handle user clicks, track game state, and check for winning conditions, you can create an interactive and engaging tic-tac-toe game.

## CODE:

HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <link rel="stylesheet" href="C:\Users\satya\Music\htmlcss\.vscode\css&jsfiles\task3.css">
</head>
<body>

    <h1>Tic-Tac-Toe</h1>

    <div class="game-mode">
        <button onclick="startGame('player')">Two Players</button>
        <button onclick="startGame('ai')">Play vs AI</button>
    </div>

    <div class="board" id="board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
    </div>

    <p id="status"></p>

    <button id="restart" onclick="resetGame()">Restart</button>

    <script src="C:\Users\satya\Music\htmlcss\.vscode\css&jsfiles\task3.js"></script>
</body>
</html>

CSS:

body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f4f4f4;
}

h1 {
    margin-top: 20px;
}

.game-mode button {
    padding: 10px 15px;
    margin: 10px;
    font-size: 18px;
    cursor: pointer;
    border: none;
    background-color: #28a745;
    color: white;
    border-radius: 5px;
}

.board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
    margin: 20px auto;
    width: 320px;
}

.cell {
    width: 100px;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2em;
    background-color: white;
    border: 2px solid #333;
    cursor: pointer;
}

.cell.taken {
    pointer-events: none;
}

#status {
    font-size: 1.5em;
    margin-top: 20px;
}

#restart {
    display: none;
    padding: 10px 15px;
    font-size: 18px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

JAVASCRIPT:

let board = ["", "", "", "", "", "", "", "", ""];
let currentPlayer = "X";
let gameActive = false;
let gameMode = "player"; // "player" or "ai"

const winningCombinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6]
];

const cells = document.querySelectorAll(".cell");
const statusDisplay = document.getElementById("status");
const restartBtn = document.getElementById("restart");

// Start Game
function startGame(mode) {
    gameMode = mode;
    gameActive = true;
    statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
}

// Handle Player Click
function handleCellClick(event) {
    const index = event.target.getAttribute("data-index");

    if (board[index] === "" && gameActive) {
        board[index] = currentPlayer;
        event.target.textContent = currentPlayer;
        event.target.classList.add("taken");

        if (checkWinner()) {
            statusDisplay.textContent = `Player ${currentPlayer} Wins!`;
            gameActive = false;
            restartBtn.style.display = "block";
            return;
        }

        if (!board.includes("")) {
            statusDisplay.textContent = "It's a Draw!";
            gameActive = false;
            restartBtn.style.display = "block";
            return;
        }

        currentPlayer = currentPlayer === "X" ? "O" : "X";

        if (gameMode === "ai" && currentPlayer === "O") {
            setTimeout(aiMove, 500);
        } else {
            statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
        }
    }
}

// AI Move (Simple AI)
function aiMove() {
    let emptyCells = board.map((value, index) => (value === "" ? index : null)).filter(val => val !== null);
    let randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];

    board[randomIndex] = "O";
    cells[randomIndex].textContent = "O";
    cells[randomIndex].classList.add("taken");

    if (checkWinner()) {
        statusDisplay.textContent = "AI Wins!";
        gameActive = false;
        restartBtn.style.display = "block";
        return;
    }

    if (!board.includes("")) {
        statusDisplay.textContent = "It's a Draw!";
        gameActive = false;
        restartBtn.style.display = "block";
        return;
    }

    currentPlayer = "X";
    statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
}

// Check for Winner
function checkWinner() {
    return winningCombinations.some(combination => {
        const [a, b, c] = combination;
        return board[a] && board[a] === board[b] && board[a] === board[c];
    });
}

// Reset Game
function resetGame() {
    board = ["", "", "", "", "", "", "", "", ""];
    currentPlayer = "X";
    gameActive = true;
    statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
    restartBtn.style.display = "none";
    
    cells.forEach(cell => {
        cell.textContent = "";
        cell.classList.remove("taken");
    });
}

// Add Event Listeners
cells.forEach(cell => cell.addEventListener("click", handleCellClick));
