# TASK4:
  TO-DO WEB APP Develop a basic to-do app that enables a user to add maintain tasks. Allow users to add/organize items in lists. Mark them Completed, Edit them, Set Date & Time of tasks

## CODE:

HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do App</title>
    <link rel="stylesheet" href="C:\Users\satya\Music\htmlcss\.vscode\css&jsfiles\task4.css">
</head>
<body>

    <div class="container">
        <h1>To-Do List</h1>
        <div class="todo-form">
            <input type="text" id="task-input" placeholder="Enter a task..." required>
            <input type="datetime-local" id="task-date">
            <button onclick="addTask()">Add Task</button>
        </div>
        <ul id="task-list"></ul>
    </div>

    <script src="C:\Users\satya\Music\htmlcss\.vscode\css&jsfiles\task4.js"></script>
</body>
</html>

CSS:

body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

.container {
    width: 350px;
    margin: 50px auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

h1 {
    margin-bottom: 20px;
}

.todo-form {
    display: flex;
    gap: 10px;
}

input {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
    flex: 1;
}

button {
    padding: 10px;
    font-size: 16px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

ul {
    list-style: none;
    padding: 0;
}

li {
    background: #fff;
    padding: 10px;
    margin: 10px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 5px;
    border-left: 5px solid #28a745;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
}

.completed {
    text-decoration: line-through;
    color: gray;
}

.actions {
    display: flex;
    gap: 5px;
}

.edit, .delete, .complete {
    cursor: pointer;
    padding: 5px;
    border: none;
    font-size: 14px;
    border-radius: 3px;
}

.complete {
    background-color: #007bff;
    color: white;
}

.edit {
    background-color: #ffc107;
    color: black;
}

.delete {
    background-color: #dc3545;
    color: white;
}

JAVASCRIPT:

document.addEventListener("DOMContentLoaded", loadTasks);

function addTask() {
    let taskInput = document.getElementById("task-input").value.trim();
    let taskDate = document.getElementById("task-date").value;

    if (!taskInput) {
        alert("Please enter a task.");
        return;
    }

    let task = {
        id: Date.now(),
        text: taskInput,
        date: taskDate,
        completed: false
    };

    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    tasks.push(task);
    localStorage.setItem("tasks", JSON.stringify(tasks));

    document.getElementById("task-input").value = "";
    document.getElementById("task-date").value = "";
    displayTasks();
}

function displayTasks() {
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    let taskList = document.getElementById("task-list");
    taskList.innerHTML = "";

    tasks.forEach(task => {
        let li = document.createElement("li");
        li.className = task.completed ? "completed" : "";
        li.innerHTML = `
            <span>${task.text} ${task.date ? ` - <small>${task.date}</small>` : ""}</span>
            <div class="actions">
                <button class="complete" onclick="toggleComplete(${task.id})">✔</button>
                <button class="edit" onclick="editTask(${task.id})">✎</button>
                <button class="delete" onclick="deleteTask(${task.id})">✖</button>
            </div>
        `;
        taskList.appendChild(li);
    });
}

function toggleComplete(id) {
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    tasks = tasks.map(task => {
        if (task.id === id) task.completed = !task.completed;
        return task;
    });
    localStorage.setItem("tasks", JSON.stringify(tasks));
    displayTasks();
}

function editTask(id) {
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    let taskToEdit = tasks.find(task => task.id === id);

    let newText = prompt("Edit Task:", taskToEdit.text);
    if (newText !== null) {
        taskToEdit.text = newText.trim();
        localStorage.setItem("tasks", JSON.stringify(tasks));
        displayTasks();
    }
}

function deleteTask(id) {
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    tasks = tasks.filter(task => task.id !== id);
    localStorage.setItem("tasks", JSON.stringify(tasks));
    displayTasks();
}

function loadTasks() {
    displayTasks();
}
